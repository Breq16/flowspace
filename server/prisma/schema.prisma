generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id BigInt @id

  // account data
  email        String   @unique
  password     String
  verified     Boolean  @default(false)
  registeredOn DateTime @default(now())

  // user profile data
  name       String
  pronouns   String?
  url        String?
  location   String?
  bio        String?
  avatarHash String?

  // relationships
  outgoingRelationships UserRelationship[] @relation("userRelationshipOutgoing")
  incomingRelationships UserRelationship[] @relation("userRelationshipIncoming")

  // messages
  directChannels Channel[]
  messages       Message[]

  // posts
  posts Post[]
}

enum UserRelationshipType {
  WAVE
  FOLLOW
  BLOCK
}

model UserRelationship {
  establishedOn DateTime             @default(now())
  type          UserRelationshipType

  fromUser User   @relation("userRelationshipOutgoing", fields: [fromId], references: [id])
  fromId   BigInt
  toUser   User   @relation("userRelationshipIncoming", fields: [toId], references: [id])
  toId     BigInt

  @@id([fromId, toId])
}

enum ChannelType {
  DIRECT
}

model Channel {
  id BigInt @id

  type ChannelType

  messages Message[]

  // direct messages
  directRecipients User[]
}

model Message {
  id BigInt @id

  sentOn DateTime @default(now())

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId BigInt

  author   User   @relation(fields: [authorId], references: [id])
  authorId BigInt

  content String
}

model Post {
  id BigInt @id

  createdAt DateTime @default(now())
  editedAt  DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id])
  authorId BigInt

  title String
  content String?

  isPrivate Boolean
}
